`timescale 1ns / 1ps
module FIFO(input clk, reset, write, read,
            input [7:0] d, output reg [7:0] q, output empty, full);
      reg [3:0] wptr = 0, rptr = 0; reg [4:0] cnt = 0;
      reg [7:0] mem [15:0];
   always @(posedge clk)
    begin   if (reset == 1'b1)
        begin
          wptr <= 0;
          rptr <= 0;
          cnt  <= 0;
        end
      else if (write && !full)
        begin
          mem[wptr] <= d;
          wptr      <= wptr + 1;
          cnt       <= cnt + 1;
        end
      else if (read && !empty)
        begin
          q <= mem[rptr];
          rptr <= rptr + 1;
          cnt  <= cnt - 1;
        end
    end
   assign empty = (cnt == 0) ? 1'b1 : 1'b0;
  assign full  = (cnt == 16) ? 1'b1 : 1'b0;
 endmodule
 
interface fifo_if;
   logic clock, read, write;      
  logic full, empty;         
  logic [7:0] d;         
  logic [7:0] q;      
  logic rst;                 
 endinterface
